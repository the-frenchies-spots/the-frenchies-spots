// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Log {
  id String @id @default(uuid())
  message String
  level Level
  meta Json
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  pseudo String
  photoUrl String
  role Role @default(BASIC)
  gamePoint Int
  //Relations one to many with spot
  spots Spot[]
  //Relations many to many with itinary
  itinaries UsersOnItinaries[]
}

model Spot {
  id Int @id @default(autoincrement())
  rating Int?
  isCanPark Boolean
  isCanVisit Boolean
  name String
  defaultPictureId Int
  isTouristic Boolean
  description String
  //Relations one to many with spotPictures
  spotPictures SpotPicture[]
  //Relations one to one with coordinate
  coordinate Coordinate @relation(fields: [coordinateId], references: [id])
  coordinateId Int @unique
  //Relations one to many with Spot
  userStandard User @relation(fields: [user], references: [id])
  user Int
  //Relations many to many with itinary
  itinaries SpotsOnIntinaries[]
}

model SpotPicture {
  id Int @id @default(autoincrement())
  url String
  //Relations one to many with spot
  spot Spot @relation(fields: [spotId], references: [id])
  spotId Int
}

model Coordinate {
  id Int @id @default(autoincrement())
  lat Int
  lng Int
  //Relations one to one with spot
  spot Spot?
}

//relations table many to many between User and Itinary
model UsersOnItinaries {
  user User @relation(fields: [userId], references: [id])
  userId Int
  itinary Itinary @relation(fields: [itinaryId], references: [id])
  itinaryId Int
  @@id([itinaryId, userId])
}

model Itinary {
  id Int @id @default(autoincrement())
  name String
  description String
  gamePoint Int
  photoUrl String
  //Relations many to many with spot
  spots SpotsOnIntinaries[]
  //Relations many to many with user
  users UsersOnItinaries[]
}

//relations table many to many between Spot and Itinary
model SpotsOnIntinaries {
  spot Spot @relation(fields: [spotId], references: [id])
  spotId Int
  itinary Itinary @relation(fields: [itinaryId], references: [id])
  itinaryId Int

  @@id([itinaryId, spotId])
}

enum Level {
  Warning
  Info
  Error
}

enum Role {
  BASIC
  ADMIN
}
