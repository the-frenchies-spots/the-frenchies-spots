generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch"]
}

generator appsync {
  provider = "prisma-client-js"
    // provider = "prisma-dbml-generator"
}

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Level {
  Warning
  Info
  Error
}

enum CategoriesSpotAndTag {
  SPARE_TIME_SPOT
  RESOURCES_SPOT
}

enum Role {
  SIMPLE_USER
  USER_ADMIN
}

enum GeoJSONPoint {
  Point
}

type Location {
  type GeoJSONPoint
  coordinates Float[]
}

type Content {
  value Json
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  hashedPassword    String
  hashedRefreshToken String?
  role              Role     @default(SIMPLE_USER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  profile           Profile?
}

model Profile {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  pseudo         String   @unique
  photoUrl       String?
  avatarUrl      String?
  gamePoint      Int      @default(0)
  userId         String   @unique @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spots          Spot[]
  location       Location?
  ratings        Rating[]
  notifications  Notification[]
  favorites      Favorite[]
  contacts       Contact[]  @relation(name: "ContactToProfile")
  profileChats   ProfileChat[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  contact        Contact[] @relation(name: "Contact")
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String   @db.ObjectId
  isRead      Boolean  @default(false)
  content     Content
  subject     String
  type        String
}

model ProfileChat {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String   @db.ObjectId
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      String   @db.ObjectId
  chatMessages ChatMessage[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  @@unique([profileId, chatId])
}

model Chat {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  participants  ProfileChat[]
  chatMessages  ChatMessage[]
  isTemporary   Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model ChatMessage {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  chat            Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String   @unique @db.ObjectId
  profileChat     ProfileChat  @relation(fields: [profileChatId], references: [id])
  profileChatId   String   @db.ObjectId
  message         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model Contact {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  profile       Profile  @relation(name: "ContactToProfile", fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String   @unique @db.ObjectId
  contact       Profile  @relation(name: "Contact", fields: [contactId], references: [id])
  contactId     String   @unique @db.ObjectId
  isFriend      Boolean  @default(false)
  authorization Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  @@unique([profileId, contactId]) // Assure l'unicit√© des relations entre profils
}

model Spot {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  isCanPark     Boolean               @default(false)
  isHidden      Boolean               @default(false)
  category      CategoriesSpotAndTag
  profile       Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String                @unique @db.ObjectId
  location      Location
  region        String
  address       String
  averageRating Float                 @default(0)
  spotPicture   SpotPicture[]
  ratings       Rating[]
  favorites     Favorite[]
  tags          TagsOnSpots[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now())
}

model TagsOnSpots {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  spot      Spot?    @relation(fields: [spotId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  spotId    String?  @db.ObjectId
  tagId     String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Tag {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  tagPictureUrl String
  category      CategoriesSpotAndTag
  spots         TagsOnSpots[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model SpotPicture {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  hostId    String
  url       String
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rate      Float
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @unique @db.ObjectId
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @unique @db.ObjectId
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  photoUrl  String?
  gamePoints Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
