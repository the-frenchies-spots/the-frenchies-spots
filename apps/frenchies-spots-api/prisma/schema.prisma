// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch"]
}

generator appsync {
  provider = "prisma-appsync"
}

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Level {
  Warning
  Info
  Error
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  password String
  token    String   @unique
  role     Role     @default(SIMPLE_USER)
  profile  Profile?
}

enum Role {
  SIMPLE_USER
  USER_ADMIN
}

model Profile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  pseudo    String    @unique
  photoUrl  String?
  gamePoint Int       @default(0)
  userId    String    @unique @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Implicit relations many to many with itinary
  itinaryIDs String[] @db.ObjectId
  itinaries Itinary[] @relation(fields: [itinaryIDs], references: [id])
  // Relations one to many with spot
  spots     Spot[]
  // Relations one to many with rating
  ratings   Rating[]
  // Relations one to many with favorite
  favorites Favorite[]
}

model Itinary {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  gamePoint   Int?
  photoUrl    String?
  // Implicit relations many to many with profile
  profileIDs  String[]   @db.ObjectId
  profiles    Profile[]  @relation(fields: [profileIDs], references: [id])
  // Implicit relations many to many with spot
  spotIDs  String[]   @db.ObjectId
  spots    Spot[]     @relation(fields: [spotIDs], references: [id])
}

model Spot {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  isCanPark     Boolean        @default(false)
  isHidden      Boolean        @default(false)
  category      CategorySpot
  // Relations one to many with profile
  profile       Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String         @unique @db.ObjectId
  // Implicit relations many to many with itinary
  itinaryIDs  String[]   @db.ObjectId
  itinaries     Itinary[] @relation(fields: [itinaryIDs], references: [id])
  lat           Float
  lng           Float
  region        String
  averageRating Float @default(0)
  // Relation one to many with spot_pictures
  spotPicture   SpotPicture[]
  // Relation one to many with rating
  ratings       Rating[]
  // Relation one to many with favorite
  favorites     Favorite[]
  // Implicit relations many to many with itinary
  tagIDs String[] @db.ObjectId
  tags Tag[] @relation(fields: [tagIDs], references: [id])
}

model SpotPicture {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  spot   Spot   @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId String @unique @db.ObjectId
}

model Product {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  photoUrl    String?
  gamePoints Int
  price Int
}

model Rating {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  rate      Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique @db.ObjectId
  spot      Spot    @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String  @unique @db.ObjectId
}


model Favorite {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique @db.ObjectId
  spot      Spot    @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String  @unique @db.ObjectId
}

model Tag {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  tagPictureUrl String
  // Implicit relations many to many with itinary
  spotIDs String[] @db.ObjectId
  spots Spot[] @relation(fields: [spotIDs], references: [id])
}

enum CategorySpot {
  SPARE_TIME_SPOT
  RESSOURCES_SPOT
}